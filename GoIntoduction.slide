Go - Introduction
29 March 2017

* 
.image imgs/saphybris.jpg _ 800

Speakers

Piotr Mścichowski
piotr.mscichowski (at) hybris.com

Adam Szecówka 
adam.szecowka (at) hybris.com



* Brought to you by Hack Your Career
More at FB Page https://www.facebook.com/Hack.your.Career 
.image imgs/hackyourcareer.png


*  Go is a programming language designed by Google to help solve Google's problems, and Google has big problems

* Problems at Google
- long builds
- each programmer using a different subset of the language
- popular languages are obsolete: C++ (1983), Java(1995), Python(1991) 

* "When builds are slow, there is time to think"

* Go - Key concepts
*** Scalability
*** Easy syntax
	- similar to other known languages
	- but without repetitions
.code src/boring.java
.caption Java
*** Concurrency
- goroutines
- channels
*** Garbage Collector

* Build time - examples
.image imgs/supervisor-build.png 100 _
.caption Build time - production microservice ~4000 LOC
.image imgs/supervisor-test-time-1.png
.image imgs/supervisor-test-time-2.png
.caption Tests Execution

* Build time - Go vs Java
- Simple program: Quadratic equation (~150 LOC)
- Java: maven + junit

- Java: mvn clean package [s]: 3.19, 2.83, 3.48, 3.53, 3.57, 2.73. Avg: *3.22*
- go build [s]: 0.19 * 3, 0.18 * 2, 0.26. Avg: 0.198
- go test [s]: 0.41 *2, 0.40 * 2, 0.43, 0.39. Avg: 0.406
- go total [s] = 0.198 + 0.406 = *0.604*
- Diff: 2.61 [s] per build. *5* *times* *faster!* 

* Fast build in go achieved by
- reduced number of open files
- no cyclic imports
- no types hierarchy
- unused import cause compilation error


* Who uses Go?
- Google: dl.google.com
.image imgs/chrome_server.png

* Who uses Go?
- Docker
.image imgs/docker.png

* Who uses Go?
- InfluxDB (Time-series data storage)
.image imgs/influx.png

* Who uses Go?
- Cloud Foundry
.image imgs/cf.png

* Who uses Go?
- Uber
.image imgs/uber.png


* Go getting started
- Get and install Go
.link https://golang.org/dl/ From here
- Set up GOPATH!
.code src/gopathTree.txt

* Library imports
.code src/imports.go

* Packages
- packages
.play -edit src/packages.go
- to install package use go get $REPOSITORY

* Access modifiers
- Private, protected, public ?
//Java style
.code src/accessModifiers.java

//Golang style
.code src/accesmod.go

* Types, functions, vars

* Basic types + zero values
 - bool 									false
 - string   								""
 - int  int8  int16  int32  int64 			0
 - uint uint8 uint16 uint32 uint64 uintptr  0
 - byte // alias for uint8                  0
 - rune // alias for int32                  0
 - float32 float64                          0.00
 - complex64 complex128                     0+0i
 - interface								nil
 - pointer									nil

* Constants & vars
.play -edit src/const.go /START OMIT/,/END OMIT/

.play -edit src/vars.go /START OMIT/,/END OMIT/

* Functions 
- Function recipe
.code src/functionRecipe.go
- Functions receive arguments as copies
- Functions can return multiple values
- Functions can be assigned to variables
- Functions can return functions
- Functions can take variadic arguments
- Function can be definied as types

* Functions
.play -edit src/functions.go

* Function part 2.
.play -edit src/functionPart2.go  /START OMIT/,/END OMIT/

* Functions part 4 - Dude! really ?!
.play -edit src/functionsPart4.go

* Structures
.play -edit src/structure.go

* Structures
- In go structures can have methods
.play -edit src/structureMethod.go

* Structures
- So basically structure is like class in Java/C# ?
- Does structure have constructor ?
- Overloading ?

* Pointers
- Wait, WAT?
.image imgs/noo.png

* Pointers
- var p *int creates pointer to int
- & makes pointer to operand :
 name := "Tom"
 ptr := &name

* Pointers
.play -edit src/pointers.go /START OMIT/,/END OMIT/

* Interface
- contract not an implementation
.code src/simpleInterface.go
- we do not need to 'tell' explicitly which interface we implement
- lot of interfaces in std lib like in package io
- duck typing

* Interface type - solution for missing generic types?
- In go you can use interfaces as type
.play -edit src/interfaceType.go   /START OMIT/,/END OMIT/
- can a function return interface{} ?


* Errors and error handling
- Say goodbye to exceptions
- Error is an interface
- So it means that you can create your own errors easily

* Errors and error handling
.code src/errorInterface.go
.play -edit src/error.go /START OMIT/,/END OMIT/

* Custom errors
.play -edit src/customErrors.go  /START OMIT/,/END OMIT/

* Custom errors
.play -edit -numbers src/customErrors.go  /SKIP OMIT/,/SKIP OMIT/

* Arrays
.play -numbers -edit src/arrays.go

* Slices
.play -numbers  -edit src/slices.go

* Slices slicing
.play -numbers  -edit src/slicing.go

* Slices - Tricky part
.play -numbers -edit src/slices_tricky_part.go

* Maps
.play -numbers -edit src/maps.go /^func main/,/^}/

* Loops
.play -numbers -edit src/for.go /^func main/,/^}/

* If
.play -numbers -edit src/if.go /^func main/,/^}/

* Defer
.play -numbers -edit src/defer.go

* Switch
.play -numbers -edit src/switch.go /^func main/,/^}/

* Goroutines 
*** Goroutine is not OS thread!
.image imgs/os_thread_cost.png 400 _
.caption From https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html


* Goroutines
.play -numbers -edit src/goroutines.go

* Goroutines
.play -numbers -edit src/million.go

*  Do not communicate by sharing memory; instead, share memory by communicating. 
.image imgs/chan.png

* Channels
.play -numbers -edit src/channels.go

* Buffered channels
.play -numbers -edit src/bufchan.go

* Example: Producer Consumer
.play -numbers -edit src/prodcons.go  /^func producer/,/^}/
.play -numbers -edit src/prodcons.go  /^func consumer/,/^}/

* Example: Producer Consumer cont.
.play -numbers -edit src/prodcons.go  /^func main/,/^}/

* Example: Timeouts
.code src/timeouts.go

* Example: "I don't care" Producer
.play -numbers -edit src/idontcareproducer.go

* Go tools
- Govendor
	Govendor is simillar a little bit to js npm
- Gofmt
	Builtin tool used for formatting go code
- Go vet
	Vet examines Go source code and reports suspicious constructs.
- Go present
	Tool for making presentation (like this one )
- Lots of them (https://godoc.org/golang.org/x/tools)

* Hackin Gliwice
.image imgs/fb.png
- More info : https://www.facebook.com/Hackin-Gliwice-1852681074976881 

* Thank you for attention. Do you have questions?

.link https://www.surveymonkey.com/r/2VBNSKX Survey

* Links:
- https://tour.golang.org/
- https://golang.org/doc/faq
- https://talks.golang.org/2012/splash.article (Go at Google: Language Design in the Service of Software Engineering)
- http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang
- https://eng.uber.com/go-geofence (How We Built Uber Engineering’s Highest Query per Second Service Using Go)

